#!/usr/bin/env python
# -*- Encoding: utf-8 -*-
#
#  Meshy: A Desktop interface for a Serval mesh
#
#  Copyright 2015-2016 Kevin Steen <ks@kevinsteen.net>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
'''Meshy - A Desktop interface for a Serval mesh

Usage: meshygui [SERVALINSTANCE_PATH]

SERVALINSTANCE_PATH defaults to the environment variable of the same name,
otherwise : ~/meshy/serval

'''
from __future__ import print_function, unicode_literals


__version_info__ = (0, 2, 1)

DEFAULT_INSTANCEPATH='~/meshy/serval'


import logging
_logger = logging.getLogger('meshygui')
logging.basicConfig(
        format='%(asctime)s:%(levelname)s:%(name)s:%(funcName)s:%(message)s',
        datefmt = '%H:%M:%S',
        #level=logging.DEBUG,
        )

try:
    import tkinter as tk
    from tkinter import messagebox
    import tkinter.ttk as ttk
except ImportError:
    import Tkinter as tk
    import tkMessageBox as messagebox
    import ttk
from collections import deque
import os
import select
import meshy

COLORS = {
          'mytext': '#f69454',  #  tangerine
          'theirtext': '#ee693f',  #  carrot
          'msgtextbackgroun': '#fcfdfe',  # off-white
          'daemonbroken': '#cf3721',  # tomato
          'daemonrunning': '#739f3d',  # pear green
         }


def main(argv):
    if len(argv) > 1:
        instancepath = argv[1]
    else:
        instancepath = os.environ.get('SERVALINSTANCE_PATH')
    if not instancepath:
        instancepath = DEFAULT_INSTANCEPATH
    root = tk.Tk()
    obj = MainWindow(root, instancepath)
    root.mainloop()



class MainWindow(object):

    def output(self, text):
        self.output_tab_obj.replace_text(text)

    def __init__(self, root, instancepath):
        self.root = root
        self.instancepath = instancepath

        self.daemon_obj = None  # DaemonController
        self.current_id = None
        self.current_id_var = tk.StringVar()
        self.peer_tab_obj = None
        self.output_tab_obj = None
        self.tree_obj = None

        self._init_ui(root)  # Sets self.daemon_obj

    def _init_ui(self, root):
        # --- Tk init ---
        self.root.title('Meshy')
        #self.root.geometry('760x500')  # Fit in 800x600
        #self.root.geometry('900x600')  # Fit in 1024x768

        # Catch the close button
        self.root.protocol("WM_DELETE_WINDOW", self.cmd_quit)
        # Catch the "quit" event.
        #self.root.createcommand('exit', self.cmd_quit)

        self.root.option_add('*tearOff', False)
        root.bind('<Alt-q>', self.cmd_quit)
        #root.bind('<Return>', self.cmd_ZZdujour)

        # --- Menu ---

        #~ menu = tk.Menu(root)
        #~ root.config(menu=menu)
        #~ def donothing(self): pass  # TODO:remove
        #~ filemenu = tk.Menu(menu)
        #~ #logd(filemenu.configure())
        #~ filemenu.add_command(label='Open...', underline=0, command=donothing)
        #~ filemenu.add_separator()
        #~ filemenu.add_command(label='Quit', underline=0, command=self.cmd_quit)
#~
        #~ editmenu = tk.Menu(menu)
        #~ editmenu.add_command(label='Copy', underline=0, command=donothing)
#~
        #~ menu.add_cascade(label='File', menu=filemenu, underline=0)
        #~ menu.add_cascade(label='Edit', menu=editmenu, underline=0)

        # --- Current Identity bar ---

        idframe = ttk.Frame(root)#, borderwidth=10, relief='ridge')
        idframe.grid(row=10, column=0, columnspan=2, sticky='new')
        btn = ttk.Button(idframe, text='Quit', command=self.cmd_quit, underline=0)
        btn.grid(row=0, column=0)
        lbl = ttk.Label(idframe, textvariable=self.current_id_var,
                        anchor='e')
        self.current_id_var.set('Current Identity: <Unknown>')
        lbl.grid(row=0, column=1, sticky='e')
        idframe.columnconfigure(1, weight=1)
        #self.current_sid = ttk.Label(idframe, anchor='w')
        #lbl.grid(row=0, column=2)


        # --- Main Content ---

        #Style().configure('TFrame', background='black', foreground='green')
        mainframe = ttk.Frame(root)#, borderwidth=10, relief='ridge')
        mainframe.grid(row=20, column=0, columnspan=2, sticky='nsew')
        self._init_mainframe(mainframe)

        # --- Daemon control ---

        control_frame = ttk.LabelFrame(root, text=' Local servald ')
        control_frame.grid(row=30, column=0, sticky=tk.EW, padx=5,
                           columnspan=2)

        # --- Statusbar ---

        self.status = tk.StringVar()
        #self.status.set('Processing...')
        status = ttk.Label(root, textvariable=self.status,
                       relief=tk.SUNKEN, anchor=tk.W)
        status.grid(row=40, column=0, sticky='wse')

        grip = ttk.Sizegrip(root)
        grip.grid(row=40, column=1, sticky=tk.SE)

        root.columnconfigure(0, weight=1)
        root.rowconfigure(20, weight=1)

        self.daemon_obj = DaemonController(control_frame, self,
                                           self.instancepath)

    def _init_mainframe(self, parent):
        '''PanedWindow
             - treepane
             - mainpane
               - Notebook
                 - peer_tab
                 - output_tab
        '''
        pw = ttk.PanedWindow(parent, orient=tk.HORIZONTAL)  # Doesn't support border
        pw.pack(fill=tk.BOTH, expand=1)

        treepane = ttk.Frame(pw)#, borderwidth=10, relief='ridge')
        pw.add(treepane, weight=1)
        self.tree_obj = TreeManager(treepane, self)

        mainpane = ttk.Frame(pw)#, borderwidth=10, relief='ridge')
        pw.add(mainpane, weight=4)

        self.tabs_w = ttk.Notebook(mainpane)
        self.tabs_w.pack(fill=tk.BOTH, expand=1)

        self.peer_tab_obj = PeerTab(self.tabs_w, self)
        self.output_tab_obj = OutputTab(self.tabs_w, self)
        self.peer_tab_obj.show()

    def cmd_quit(self, *ign):
        logd('cmd_quit called')
        self.root.quit()

    def set_current_id(self, sid):
        self.current_id = sid
        self.current_id_var.set('Current Identity: {}'.format(sid))



class DaemonController(object):
    def __init__(self, parent, main_obj, instancepath):
        self.parent = parent
        self.main_obj = main_obj

        self.monitor_socket = None

        # --- Styles ---
        s = ttk.Style()
        s.configure('broken.ServaldFrame.TLabelframe', background=COLORS['daemonbroken'])
        s.configure('running.ServaldFrame.TLabelframe', background=COLORS['daemonrunning'])
        #ttk.Style().configure('TLabel', background='red', foreground='white')
        #~ print(toolbar['style'])
        #~ print(toolbar.winfo_class()) #TLabelframe
        #~ print(ttk.Style().layout('TLabelframe'))
        #~ print(ttk.Style().element_options('TLabelframe'))
        #~ print(s.lookup('TLabel', 'background'))

        self.indicator = ttk.Frame(parent,
                        padding=10,
                        relief=tk.FLAT,
                        )
        self.indicator.pack(fill=tk.BOTH)
        # TODO: Set minimum width for Entry field
        toolbar = ttk.Frame(self.indicator, padding=1)
        toolbar.grid(sticky='wns')

        start_servald_btn = ttk.Button(toolbar, text='Start servald',
                                   command=self.cmd_start_servald)
        start_servald_btn.grid(row=0, column=0, padx=(0,2))
        stop_servald_btn = ttk.Button(toolbar, text='Stop',
                        command=self.cmd_stop_servald)
        stop_servald_btn.grid(row=0, column=1, padx=2)
        status_btn = ttk.Button(toolbar, text='Status',
                            command=self.cmd_servald_status)
        status_btn.grid(row=0, column=2, padx=2)

        cmd_frame = ttk.Frame(toolbar)
        cmd_frame.grid(row=0, column=3, sticky=tk.W)

        label = ttk.Label(cmd_frame, text='command:')
        label.grid(row=0, column=0, sticky=tk.E)

        self.servalcmd = tk.StringVar()
        # TODO:Dynamically modify text size on window resize
        entry = ttk.Entry(cmd_frame, textvariable=self.servalcmd, width=30)
        entry.grid(row=0, column=1, sticky=tk.W)
        runbtn = ttk.Button(cmd_frame, text='Run', default=tk.ACTIVE,
                            command=self.cmd_run_servalcmd)
        runbtn.grid(row=0, column=2)


        # TEMP
        #~ btn = ttk.Button(toolbar, text='rem peer', command=lambda :self.unregister_peer('abcd'))
        #~ btn.grid(row=1, column=4)
        #~ btn = ttk.Button(toolbar, text='add peer', command=lambda :self.register_peer('abcd'))
        #~ btn.grid(row=1, column=3)
        #~ btn = ttk.Button(toolbar, text='List Keyring', command=self.cmd_ZZdujour)
        #~ btn.grid(row=0, column=5)
        #~ # --- Row 2 ----
        #~ btn = ttk.Button(toolbar, text='Self + Peers', command=self.cmd_show_peers)
        #~ btn.grid(row=1, column=0)
        #~ btn = ttk.Button(toolbar, text='Send Msg', command=self.cmd_send_message)
        #~ btn.grid(row=1, column=1)
        #~ btn = ttk.Button(toolbar, text='Show Msgs', command=self.cmd_show_messages)
        #~ btn.grid(row=1, column=2)

        toolbar.columnconfigure(3, weight=1)

        # Pressing Enter in the Entry should run the command
        entry.bind('<Return>', lambda e: runbtn.invoke())
        # Pressing Enter on the Run button should run the command
        runbtn.bind('<Return>', lambda e: runbtn.invoke())
        entry.focus()

        self.indicator['style'] = 'broken.ServaldFrame.TLabelframe'
        logi('Using serval instance:%s', instancepath)
        try:  # TODO:Cleaner implementation required
            self.servald = meshy.Servald(instancepath=instancepath,
                                         binpath='./servald').start()
            res, out = self.servald.exec_cmd(['status'])
        except (meshy.ServalError, FileNotFoundError):
            try:
                self.servald = meshy.Servald(instancepath=instancepath).start()
                res, out = self.servald.exec_cmd(['status'])
            except OSError:
                self.main_obj.output('Unable to initialise serval. Please check '
                    'the serval logs for details')
                messagebox.showerror(
                    title='Cannot execute `servald`',
                    message='Cannot execute `servald`',
                    detail='The executable `servald` must be in your '
                        'PATH or in the current directory.',
                    icon='error',
                    )
                res = 1
        if res == 0:
            self._init_from_running_servald()
        parent['text'] = ' %s ' % self.servald.instancepath

    def cmd_run_servalcmd(self, *ign):
        cmd = self.servalcmd.get().strip().split()
        res, out = self.servald.exec_cmd(cmd)
        #TODO:Get unicode output from meshy
        out = out.decode('utf8')
        self.main_obj.output('Exit code:{}\n{}'.format(res, out))

    def cmd_servald_status(self):
        res, out = self.servald.exec_cmd(['status'])
        #TODO:Get unicode output from meshy
        out = out.decode('utf8')
        self.main_obj.output('Exit code:{}\n{}'.format(res, out))

    def cmd_stop_servald(self, *ignore):
        res, out = self.servald.stop_running_daemon()
        if self.monitor_socket:
            self.monitor_socket.close()
        self.monitor_socket = None
        if res == 0:
            self.indicator['style'] = 'ServaldFrame.TLabelframe'
        else:
            self.indicator['style'] = 'broken.ServaldFrame.TLabelframe'
            self.main_obj.output('Exit code:{}\n{}'.format(res, out))

    def cmd_start_servald(self, *ignore):
        try:
            self.servald.start()
        except meshy.ServalError:
            self.indicator['style'] = 'broken.ServaldFrame.TLabelframe'
        self._init_from_running_servald()

    def list_messages(self, my_sid, their_sid):
        logd('(my_sid=%s, their_sid=%s)' % (my_sid, their_sid))
        return self.servald.fetch_meshms_messagelist(my_sid=my_sid,
                                                     their_sid=their_sid)

    def list_messages_cli(self, my_sid, their_sid):
        cmd = 'meshms list messages {} {}'.format(my_sid, their_sid)
        res, out = self.servald.exec_cmd(cmd.split())
        #TODO:Get unicode output from meshy
        out = out.decode('utf8')
        #~ self.main_obj.output('Exit code:{}\n{}'.format(res, out))
        logd('Exit code:{}\n{}'.format(res, out))
        return out

    def poll_monitor_socket(self):
        '''Scheduled function. Checks if the monitor_socket is still
        connected and updates the visual status of the daemon if it is not.
        '''
        if self.monitor_socket is None:
            return
        r,w,x = select.select([self.monitor_socket], [],
                    [self.monitor_socket], 0)  # 0 to return immediately
        resched = True
        if x:  # Exception
            logd('Exception on monitor socket')
            self.monitor_socket.close()
            resched = False
        if r:  # readable
            data = self.monitor_socket.recv(512)
            if data:
                # ignore incoming data
                try:
                    self._process_monitor_announcement(data)
                except Exception as e:
                    loge('Exception while processing monitor announcement: %s', e)
            else:  # End of File. Remote closed
                self.monitor_socket.close()
                resched = False
        if resched:
            # Re-schedule ourselves
            self.parent.after(100, self.poll_monitor_socket)
        else:
            self.indicator['style'] = 'broken.ServaldFrame.TLabelframe'

    def register_peer(self, sid):
        logd('New Peer:%r', sid)
        self.main_obj.tree_obj.register_peer(sid)

    def unregister_peer(self, sid):
        logd('Peer disappeared:%r', sid)
        self.main_obj.tree_obj.unregister_peer(sid)

    def send_message(self, sender, recipient, message):
        cmd = 'meshms send message {} {}'.format(sender, recipient)
        cmd = cmd.strip().split() + [message]
        res, out = self.servald.exec_cmd(cmd)
        #TODO:Get unicode output from meshy
        out = out.decode('utf8')
        #~ self.main_obj.output('Exit code:{}\n{}'.format(res, out))
        logd('Exit code:{}\n{}'.format(res, out))

    def _init_from_running_servald(self):
        self._init_monitor_socket(self.servald)
        # TODO: Create a method on MainWindow:
        #~ curr_id = self.servald.keyring[0]
        #~ logi('Current Id:%s', curr_id)
        curr_id = self.servald.id_self
        if curr_id:
            logd('Current id:%s', curr_id)
            self.main_obj.set_current_id(curr_id)
        else:  # Generate an id
            curr_id = self.servald.keyring.create_SID()
            logi('Generated a new ID:%s' % curr_id)
        self.indicator['style'] = 'running.ServaldFrame.TLabelframe'

    def _init_monitor_socket(self, servald):
        self.monitor_socket = servald.get_monitor_socket()
        mons = 'rhizome peers dnahelper links interface'  # vomp quit
        for mon in mons.split():
            self.monitor_socket.send('monitor {}\n'.format(mon).encode('utf8'))
        # Schedule a poll
        self.parent.after(100, self.poll_monitor_socket)

    def _process_monitor_announcement(self, buf):
        '''Parse and process output from a servald monitor.
        buf must be bytes'''
        #TODO:Don't assume entire message will appear in one buf
        eventlist, buf = self.servald.parse_monitor_stream(buf)
        for etype, edata in eventlist:
            if 'BINARY' == etype:
                # Might be an incoming bundle. Try displaying messages
                self.main_obj.peer_tab_obj.display_messages()
            elif 'NEWPEER' == etype:
                self.register_peer(edata)
            elif 'OLDPEER' == etype:
                self.unregister_peer(edata)



class OutputTab(object):
    '''Draws and controls the Output tab'''
    def __init__(self, parent_notebook, main_obj):
        self.main_obj = main_obj
        self.parent_notebook = parent_notebook
        self.frame = ttk.Frame(parent_notebook)#, padding=10, borderwidth=10, relief='ridge')
        self.frame.pack(fill=tk.BOTH, expand=1)
        parent_notebook.add(self.frame, text='Output')

        self.output_w = tk.Text(self.frame)#, width=80, height=31)
        self.output_w.grid(row=0, column=0, sticky=tk.NSEW)
        self.output_w.insert('1.0', 'Output will appear here.')

        scroll = ttk.Scrollbar(self.frame, orient=tk.VERTICAL,
                               command=self.output_w.yview)
        scroll.grid(row=0, column=1, sticky=tk.NS)
        self.output_w.configure(yscrollcommand=scroll.set)

        self.frame.columnconfigure(0, weight=1)
        self.frame.rowconfigure(0, weight=1)

    def append_text(self, text):
        '''Append text to the contents of the output window'''
        self.output_w.insert('end', text)
        self.show()

    def replace_text(self, text):
        '''Replace the contents of the output window with supplied text'''
        self.output_w.delete('1.0', 'end')
        self.output_w.insert('1.0', text)
        self.show()

    def show(self):
        '''Show our tab'''
        self.parent_notebook.select(self.frame)



class PeerTab(object):
    '''Draws and controls the Peer tab'''
    def __init__(self, parent_notebook, main_obj):
        self.main_obj = main_obj
        self.parent_notebook = parent_notebook
        self.sid = None
        self.msg_w = None  # Message display widget

        self.frame = ttk.Frame(parent_notebook, padding=10)#, borderwidth=10, relief='ridge')
        self.frame.pack(fill=tk.BOTH, expand=1)
        parent_notebook.add(self.frame, text='Peer')

        self.header_var = tk.StringVar()
        self.header_var.set('<-- Select a Peer in the Network Peers list.')

        self.entry_var = tk.StringVar()
        self.id_var = tk.StringVar()
        self.id_var.set('as <Current Id>')

        self._init_ui(self.frame)

    def _init_ui(self, parent):
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(5, weight=1)
        lbl = ttk.Label(parent, textvariable=self.header_var)
        lbl.grid(row=1, column=0, columnspan=5, padx=5, pady=5, sticky=tk.W)

        # --- Message display ---
        frm = ttk.Frame(parent)#, borderwidth=10, relief='ridge')
        frm.grid(row=5, column=0, columnspan=5, sticky=tk.NSEW)
        self.msg_w = tk.Text(frm, state='disabled', wrap='word')
        self.msg_w.grid(row=0, column=0, sticky=tk.NSEW)
        scroll = ttk.Scrollbar(frm, orient=tk.VERTICAL, command=self.msg_w.yview)
        scroll.grid(row=0, column=1, sticky=tk.NS)
        self.msg_w.configure(yscrollcommand=scroll.set)
        frm.columnconfigure(0, weight=1)
        frm.rowconfigure(0, weight=1)
        self.msg_w.tag_configure('theirtext',justify='right',
            background=COLORS['theirtext'])
        self.msg_w.tag_configure('mytext',
            background=COLORS['mytext'])

        entry = ttk.Entry(parent, textvariable=self.entry_var)
        entry.grid(row=6, column=0, columnspan=4, sticky=tk.EW)
        sendbtn = ttk.Button(parent, text='Send', command=self.cmd_send)
        sendbtn.grid(row=6, column=4)
        # Pressing Enter in the Entry should run the command
        entry.bind('<Return>', lambda e: sendbtn.invoke())
        # Pressing Enter on the Run button should run the command
        sendbtn.bind('<Return>', lambda e: sendbtn.invoke())
        entry.focus()

        lbl = ttk.Label(parent, textvariable=self.id_var)
        lbl.grid(row=7, column=4)

        tframe = ttk.LabelFrame(parent, text=' Message templates ')
        tframe.grid(row=8, column=0, columnspan=4, sticky=tk.EW, padx=5)
        # TODO: Defining this function results in all buttons using the
        # last definition :-(
        #~ templates = MESHMS_TEMPLATES[:10]
        #~ for col, t in enumerate(templates):
            #~ def func():
                #~ self.cmd_template_click(t[1])
            #~ btn = ttk.Button(tframe, padding=5, text=t[0],
                    #~ command=func)
            #~ btn.grid(row=col//5, column=col%5)
        btn = ttk.Button(tframe, padding=5, text='help',
                command=lambda: self.cmd_template_click('help'))
        btn.grid(row=0, column=0)
        btn = ttk.Button(tframe, padding=5, text='version',
                command=lambda: self.cmd_template_click('version'))
        btn.grid(row=0, column=1)
        btn = ttk.Button(tframe, padding=5, text='peers',
                command=lambda: self.cmd_template_click('peers'))
        btn.grid(row=0, column=2)
        btn = ttk.Button(tframe, padding=5, text='date',
                command=lambda: self.cmd_template_click('date'))
        btn.grid(row=0, column=3)
        btn = ttk.Button(tframe, padding=5, text='reboot',
                command=lambda: self.cmd_template_click('reboot'))
        btn.grid(row=0, column=4)
        btn = ttk.Button(tframe, padding=5, text='wifioff',
                command=lambda: self.cmd_template_click('wifioff'))
        btn.grid(row=1, column=0)
        btn = ttk.Button(tframe, padding=5, text='wifion',
                command=lambda: self.cmd_template_click('wifion'))
        btn.grid(row=1, column=1)
        btn = ttk.Button(tframe, padding=5, text='uhfoff',
                command=lambda: self.cmd_template_click('uhfoff'))
        btn.grid(row=1, column=2)
        btn = ttk.Button(tframe, padding=5, text='uhfon',
                command=lambda: self.cmd_template_click('uhfon'))
        btn.grid(row=1, column=3)

    def cmd_send(self):
        logd('cmd_send')
        text = self.entry_var.get()
        self._send_message(text=text)
        self.entry_var.set('')

    def cmd_template_click(self, text):
        logd('template click:%s', text)
        self._send_message(text=text)

    def _send_message(self, text):
        self.main_obj.daemon_obj.send_message(
            sender=self.main_obj.current_id.sid,
            recipient=self.sid,
            message=text,
            )
        self.display_messages()

    def display_messages(self):
        self.msg_w['state'] = 'normal'
        self.msg_w.delete('1.0', 'end')
        if not self.sid:
            return
        msglist = deque()#maxlen=15)

        # Reverse message order & keep only required fields:
        for msg in self.main_obj.daemon_obj.list_messages(
                                    my_sid=self.main_obj.current_id.sid,
                                    their_sid=self.sid):
            msglist.appendleft({
                'timestamp': msg['timestamp'],
                'text': msg['text'],
                'type': msg['type'],
                })

        for msg in msglist:
            tags = ()
            if msg['type'] == '<' :
                tags = ('theirtext')
            elif msg['type'] == '>':
                tags = ('mytext')
            self.msg_w.insert('end',
                '{}\n'.format(
                    #msg['timestamp'],
                    msg['text'],
                    ),
                tags,
                )
            #self.msg_w.insert('end', '\n')
        self.msg_w.see('end -2 lines')
        self.msg_w['state'] = 'disabled'

    def show(self):
        '''Show our tab'''
        self.parent_notebook.select(self.frame)

    def switch_to_sid(self, sid):
        '''Display information for supplied sid'''
        logd('PeerTab.switch_to_sid:%r', sid)
        self.sid = sid
        self.header_var.set(sid)
        self.show()
        self.display_messages()



class TreeManager(object):
    '''Manages the TreeView'''
    # Naming items in treeview like peers.<SID>
    def __init__(self, parent, main_obj):
        self.main_obj = main_obj
        self.tree_w = ttk.Treeview(parent)#, columns=('sid'))#, height=30
        #self.tree_w.column('sid', width=0)
        self.tree_w.grid(row=0, column=0, sticky=tk.NSEW)
        s = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.tree_w.yview)
        s.grid(row=0, column=1, sticky=tk.NS)
        self.tree_w.configure(yscrollcommand=s.set)

        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(0, weight=1)

        id1 = self.tree_w.insert('', 0, 'peers', text='Network Peers', open=True)
        #id2 = self.tree_w.insert('', 1, 'ab', text='Latest Subscriptions', open=True)
        #~ self.tree_w.insert(id1, 'end',
            #~ 'peers.33FE98B9ED39A0C87F37583E72ED51140A65AD68C0D12B4D90F118476202E657', # franny
            #~ text='franny')
        #~ for i in range(20):
            #~ self.tree_w.insert(id1, 'end',
                #~ 'peers.{}'.format(i),text=i)

        self.tree_w.bind('<<TreeviewSelect>>', self.cmd_select)

    def cmd_select(self, event):
        '''Figures out which item was clicked and invokes relevant
        functionality.'''
        itemid = self.tree_w.focus()
        logd('itemclicked %r', itemid)
        if itemid.startswith('peers.'):
            sid = itemid[6:]
            self.main_obj.peer_tab_obj.switch_to_sid(sid)

    def register_peer(self, sid):
        '''Show a new peer in the treeview'''
        try:
            self.tree_w.insert('peers', 'end', 'peers.%s' % sid,
                               text=sid[:10]+'*')#, values=(sid))
        except tk.TclError:
            self.tree_w.item('peers.%s' % sid, text=sid[:10]+'*')
        #self.main_obj.ttree.item(sid)['tags'] = 'disabled'
        #logd('item %r', self.tree_w.item('peers.%s' % sid))

    def unregister_peer(self, sid):
        '''Show peer as no longer around'''
        self.tree_w.item('peers.%s' % sid, text='...%s*' % sid[:10])
        logd('item %r', self.tree_w.item('peers.%s' % sid))



# Functions ----------------------------------------------------------
#
logd = _logger.debug
logi = _logger.info
logw = _logger.warning  # Default log output level
loge = _logger.error
logc = _logger.critical


if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1 and \
        (sys.argv[1] == '-h' or sys.argv[1] == '--help'):
        print(__doc__)
    else:
        main(sys.argv)

# Useful snippets:
# , borderwidth=10, relief='ridge'
# .pack(fill=tk.BOTH)
# logd('configure:%s', .configure())
